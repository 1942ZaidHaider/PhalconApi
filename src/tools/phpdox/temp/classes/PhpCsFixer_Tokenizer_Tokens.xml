<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens" abstract="false" final="false" start="29" end="1646">
  <file path="../vendor/friendsofphp/php-cs-fixer/src/Tokenizer" file="Tokens.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/friendsofphp/php-cs-fixer/src/Tokenizer/Tokens.php" size="47847" time="2021-11-15T17:17:55+00:00" unixtime="1636996675" sha1="eb9216eb6d9c05c643d4350c9fc79b167f5b412f" relative="vendor/friendsofphp/php-cs-fixer/src/Tokenizer/Tokens.php"/>
  <docblock>
    <description compact="Collection of code tokens.">Its role is to provide the ability to manage collection and navigate through it.

As a token prototype you should understand a single element generated by token_get_all.</description>
    <author value="Dariusz RumiÅ„ski &lt;dariusz.ruminski@gmail.com&gt;"/>
    <extends value="\SplFixedArray&lt;Token&gt;"/>
  </docblock>
  <extends full="SplFixedArray" namespace="" name="SplFixedArray"/>
  <constant type="{unknown}" name="BLOCK_TYPE_PARENTHESIS_BRACE" value="1"/>
  <constant type="{unknown}" name="BLOCK_TYPE_CURLY_BRACE" value="2"/>
  <constant type="{unknown}" name="BLOCK_TYPE_INDEX_SQUARE_BRACE" value="3"/>
  <constant type="{unknown}" name="BLOCK_TYPE_ARRAY_SQUARE_BRACE" value="4"/>
  <constant type="{unknown}" name="BLOCK_TYPE_DYNAMIC_PROP_BRACE" value="5"/>
  <constant type="{unknown}" name="BLOCK_TYPE_DYNAMIC_VAR_BRACE" value="6"/>
  <constant type="{unknown}" name="BLOCK_TYPE_ARRAY_INDEX_CURLY_BRACE" value="7"/>
  <constant type="{unknown}" name="BLOCK_TYPE_GROUP_IMPORT_BRACE" value="8"/>
  <constant type="{unknown}" name="BLOCK_TYPE_DESTRUCTURING_SQUARE_BRACE" value="9"/>
  <constant type="{unknown}" name="BLOCK_TYPE_BRACE_CLASS_INSTANTIATION" value="10"/>
  <constant type="{unknown}" name="BLOCK_TYPE_ATTRIBUTE" value="11"/>
  <member name="cache" default="" type="array" visibility="private" static="true" line="48">
    <docblock>
      <description compact="Static class cache."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="blockStartCache" default="" type="array" visibility="private" static="false" line="55">
    <docblock>
      <description compact="Cache of block starts. Any change in collection will invalidate it."/>
      <var description="int&gt;" type="object">
        <type full="PhpCsFixer\Tokenizer\array&lt;int" namespace="PhpCsFixer\Tokenizer" name="array&lt;int"/>
      </var>
    </docblock>
  </member>
  <member name="blockEndCache" default="" type="array" visibility="private" static="false" line="62">
    <docblock>
      <description compact="Cache of block ends. Any change in collection will invalidate it."/>
      <var description="int&gt;" type="object">
        <type full="PhpCsFixer\Tokenizer\array&lt;int" namespace="PhpCsFixer\Tokenizer" name="array&lt;int"/>
      </var>
    </docblock>
  </member>
  <member name="codeHash" visibility="private" static="false" line="69">
    <docblock>
      <description compact="crc32 hash of code string."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="changed" default="false" type="boolean" visibility="private" static="false" line="78">
    <docblock>
      <description compact="Flag is collection was changed.">It doesn't know about change of collection's items. To check it run `isChanged` method.</description>
      <var type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="foundTokenKinds" default="" type="array" visibility="private" static="false" line="89">
    <docblock>
      <description compact="Set of found token kinds.">When the token kind is present in this set it means that given token kind
was ever seen inside the collection (but may not be part of it any longer).
The key is token kind and the value is always true.</description>
      <var description="int&gt;" type="object">
        <type full="PhpCsFixer\Tokenizer\array&lt;int|string" namespace="PhpCsFixer\Tokenizer" name="array&lt;int|string"/>
      </var>
    </docblock>
  </member>
  <member name="isLegacyMode" default="false" type="boolean" visibility="private" static="true" line="96">
    <docblock>
      <description/>
      <var type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </var>
      <todo value="remove at 3.0"/>
    </docblock>
  </member>
  <method name="__clone" start="101" end="106" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clone tokens collection."/>
    </docblock>
  </method>
  <method name="isLegacyMode" start="115" end="118" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
      <internal/>
      <todo value="remove at 3.0"/>
    </docblock>
  </method>
  <method name="setLegacyMode" start="127" end="134" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$isLegacy">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
      <internal/>
      <todo value="remove at 3.0"/>
    </docblock>
    <parameter name="isLegacy" byreference="false" type="{unknown}"/>
  </method>
  <method name="clearCache" start="141" end="152" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Clear cache - one position or all of them."/>
      <param description="position to clear, when null clear all" type="object" variable="$key">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </param>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="detectBlockType" start="161" end="174" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Detect type of block."/>
      <param description="token" type="object" variable="$token">
        <type full="PhpCsFixer\Tokenizer\Token" namespace="PhpCsFixer\Tokenizer" name="Token"/>
      </param>
      <return description="array with 'type' and 'isStart' keys or null if not found" type="object">
        <type full="PhpCsFixer\Tokenizer\null|array" namespace="PhpCsFixer\Tokenizer" name="null|array"/>
      </return>
    </docblock>
    <parameter name="token" byreference="false" type="object">
      <type full="PhpCsFixer\Tokenizer\Token" namespace="PhpCsFixer\Tokenizer" name="Token"/>
    </parameter>
  </method>
  <method name="fromArray" start="184" end="204" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Create token collection from array."/>
      <param description="the array to import" type="array" variable="$array" of="object">
        <type full="PhpCsFixer\Tokenizer\Token" namespace="PhpCsFixer\Tokenizer" name="Token"/>
      </param>
      <param description="save the numeric indexes used in the original array, default is yes" type="object" variable="$saveIndexes">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
      </return>
    </docblock>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="saveIndexes" byreference="false" type="{unknown}" default="NULL"/>
    <inline>
      <comment value="regenerate code to calculate code hash" line="200"/>
    </inline>
  </method>
  <method name="fromCode" start="213" end="236" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Create token collection directly from code."/>
      <param description="PHP code" type="string" variable="$code"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
      </return>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
  </method>
  <method name="getBlockEdgeDefinitions" start="241" end="295" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="array"/>
    </docblock>
    <inline>
      <todo value="drop condition when PHP 8.0+ is required" line="286"/>
    </inline>
  </method>
  <method name="setSize" start="304" end="313" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set new size of collection."/>
      <param type="int" variable="$size"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <parameter name="size" byreference="false" type="{unknown}"/>
  </method>
  <method name="offsetUnset" start="320" end="325" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Unset collection item."/>
      <param type="int" variable="$index"/>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="offsetSet" start="335" end="351" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set collection item.">Warning! `$newval` must not be typehinted to be compatible with `ArrayAccess::offsetSet` method.</description>
      <param type="int" variable="$index"/>
      <param type="object" variable="$newval">
        <type full="PhpCsFixer\Tokenizer\Token" namespace="PhpCsFixer\Tokenizer" name="Token"/>
      </param>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="newval" byreference="false" type="{unknown}"/>
  </method>
  <method name="clearChanged" start="356" end="365" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clear internal flag if collection was changed and flag for all collection's items."/>
    </docblock>
  </method>
  <method name="clearEmptyTokens" start="372" end="395" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clear empty tokens.">Empty tokens can occur e.g. after calling clear on item of collection.</description>
    </docblock>
    <inline>
      <comment value="no empty token found, therefore there is no need to override collection" line="383"/>
    </inline>
  </method>
  <method name="ensureWhitespaceAtIndex" start="409" end="459" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Ensure that on given index is a whitespace with given kind.">If there is a whitespace then it's content will be modified.
If not - the new Token will be added.</description>
      <param description="index" type="int" variable="$index"/>
      <param description="index offset for Token insertion" type="int" variable="$indexOffset"/>
      <param description="whitespace to set" type="string" variable="$whitespace"/>
      <return description="if new Token was added" type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="indexOffset" byreference="false" type="{unknown}"/>
    <parameter name="whitespace" byreference="false" type="{unknown}"/>
  </method>
  <method name="findBlockEnd" start="468" end="479" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="type of block, one of BLOCK_TYPE_" type="int" variable="$type"/>
      <param description="index of opening brace" type="int" variable="$searchIndex"/>
      <param description="if method should find block's end, default true, otherwise method find block's start" type="object" variable="$findEnd">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
      <return description="index of closing brace" type="int"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="searchIndex" byreference="false" type="{unknown}"/>
    <parameter name="findEnd" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="findBlockStart" start="487" end="490" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="type of block, one of BLOCK_TYPE_" type="int" variable="$type"/>
      <param description="index of closing brace" type="int" variable="$searchIndex"/>
      <return description="index of opening brace" type="int"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="searchIndex" byreference="false" type="{unknown}"/>
  </method>
  <method name="findGivenKind" start="499" end="528" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="kind or array of kind" type="object" variable="$possibleKind">
        <type full="PhpCsFixer\Tokenizer\array|int" namespace="PhpCsFixer\Tokenizer" name="array|int"/>
      </param>
      <param description="optional offset" type="int" variable="$start"/>
      <param description="optional limit" type="object" variable="$end">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </param>
      <return description="array of tokens of given kinds or assoc array of arrays" type="array"/>
    </docblock>
    <parameter name="possibleKind" byreference="false" type="{unknown}"/>
    <parameter name="start" byreference="false" type="integer" default="0"/>
    <parameter name="end" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="generateCode" start="533" end="539" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="generatePartialCode" start="549" end="558" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate code from tokens between given indexes."/>
      <param description="start index" type="int" variable="$start"/>
      <param description="end index" type="int" variable="$end"/>
      <return type="string"/>
    </docblock>
    <parameter name="start" byreference="false" type="{unknown}"/>
    <parameter name="end" byreference="false" type="{unknown}"/>
  </method>
  <method name="getCodeHash" start="565" end="568" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get hash of code."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getNextNonWhitespace" start="580" end="583" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest next token which is non whitespace.">This method is shorthand for getNonWhitespaceSibling method.</description>
      <param description="token index" type="int" variable="$index"/>
      <param description="whitespaces characters for Token::isWhitespace" type="object" variable="$whitespaces">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="whitespaces" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="getNextTokenOfKind" start="596" end="599" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest next token of given kind.">This method is shorthand for getTokenOfKindSibling method.</description>
      <param description="token index" type="int" variable="$index"/>
      <param description="possible tokens" type="array" variable="$tokens"/>
      <param description="perform a case sensitive comparison" type="object" variable="$caseSensitive">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="array" default=""/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="getNonWhitespaceSibling" start="610" end="623" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest sibling token which is non whitespace."/>
      <param description="token index" type="int" variable="$index"/>
      <param description="direction for looking, +1 or -1" type="int" variable="$direction"/>
      <param description="whitespaces characters for Token::isWhitespace" type="object" variable="$whitespaces">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="direction" byreference="false" type="{unknown}"/>
    <parameter name="whitespaces" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="getPrevNonWhitespace" start="635" end="638" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest previous token which is non whitespace.">This method is shorthand for getNonWhitespaceSibling method.</description>
      <param description="token index" type="int" variable="$index"/>
      <param description="whitespaces characters for Token::isWhitespace" type="object" variable="$whitespaces">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="whitespaces" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="getPrevTokenOfKind" start="650" end="653" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest previous token of given kind.">This method is shorthand for getTokenOfKindSibling method.</description>
      <param description="token index" type="int" variable="$index"/>
      <param description="possible tokens" type="array" variable="$tokens"/>
      <param description="perform a case sensitive comparison" type="object" variable="$caseSensitive">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="array" default=""/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="getTokenOfKindSibling" start="665" end="688" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest sibling token of given kind."/>
      <param description="token index" type="int" variable="$index"/>
      <param description="direction for looking, +1 or -1" type="int" variable="$direction"/>
      <param description="possible tokens" type="array" variable="$tokens"/>
      <param description="perform a case sensitive comparison" type="object" variable="$caseSensitive">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="direction" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="array" default=""/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="getTokenNotOfKindSibling" start="699" end="708" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest sibling token not of given kind."/>
      <param description="token index" type="int" variable="$index"/>
      <param description="direction for looking, +1 or -1" type="int" variable="$direction"/>
      <param description="possible tokens" type="array" variable="$tokens"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="direction" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="array" default=""/>
  </method>
  <method name="getTokenNotOfKindsSibling" start="719" end="728" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest sibling token not of given kind."/>
      <param description="token index" type="int" variable="$index"/>
      <param description="direction for looking, +1 or -1" type="int" variable="$direction"/>
      <param description="possible tokens kinds" type="array" variable="$kinds"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="direction" byreference="false" type="{unknown}"/>
    <parameter name="kinds" byreference="false" type="array" default=""/>
  </method>
  <method name="getMeaningfulTokenSibling" start="738" end="745" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest sibling token that is not a whitespace, comment or attribute."/>
      <param description="token index" type="int" variable="$index"/>
      <param description="direction for looking, +1 or -1" type="int" variable="$direction"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="direction" byreference="false" type="{unknown}"/>
  </method>
  <method name="getNonEmptySibling" start="755" end="768" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest sibling token which is not empty."/>
      <param description="token index" type="int" variable="$index"/>
      <param description="direction for looking, +1 or -1" type="int" variable="$direction"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="direction" byreference="false" type="{unknown}"/>
  </method>
  <method name="getNextMeaningfulToken" start="777" end="780" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest next token that is not a whitespace or comment."/>
      <param description="token index" type="int" variable="$index"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="getPrevMeaningfulToken" start="789" end="792" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get index for closest previous token that is not a whitespace or comment."/>
      <param description="token index" type="int" variable="$index"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="findSequence" start="806" end="901" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find a sequence of meaningful tokens and returns the array of their locations."/>
      <param description="an array of tokens (kinds) (same format used by getNextTokenOfKind)" type="array" variable="$sequence"/>
      <param description="start index, defaulting to the start of the file" type="int" variable="$start"/>
      <param description="end index, defaulting to the end of the file" type="int" variable="$end"/>
      <param description="bool&gt;|bool $caseSensitive global case sensitiveness or an array of booleans, whose keys should match" type="object">the ones used in $others. If any is missing, the default case-sensitive
                                            comparison is used<type full="PhpCsFixer\Tokenizer\array&lt;int" namespace="PhpCsFixer\Tokenizer" name="array&lt;int"/></param>
      <return description="Token&gt; an array containing the tokens matching the sequence elements, indexed by their position" type="object">
        <type full="PhpCsFixer\Tokenizer\null|array&lt;int" namespace="PhpCsFixer\Tokenizer" name="null|array&lt;int"/>
      </return>
    </docblock>
    <parameter name="sequence" byreference="false" type="array"/>
    <parameter name="start" byreference="false" type="integer" default="0"/>
    <parameter name="end" byreference="false" type="{unknown}" default="NULL"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
    <inline>
      <comment value="$end defaults to the end of the collection" line="813"/>
      <comment value="make sure the sequence content is &quot;meaningful&quot;" line="822"/>
      <comment value="remove the first token from the sequence, so we can freely iterate through the sequence after a match to" line="852"/>
      <comment value="the first one is found" line="853"/>
      <comment value="begin searching for the first token in the sequence (start included)" line="859"/>
    </inline>
  </method>
  <method name="insertAt" start="909" end="914" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Insert instances of Token inside collection."/>
      <param description="start inserting index" type="int" variable="$index"/>
      <param description="instances of Token to insert" type="object" variable="$items">
        <type full="PhpCsFixer\Tokenizer\array&lt;Token&gt;|Token|Tokens" namespace="PhpCsFixer\Tokenizer" name="array&lt;Token&gt;|Token|Tokens"/>
      </param>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="items" byreference="false" type="{unknown}"/>
  </method>
  <method name="insertSlices" start="935" end="981" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Insert a slices or individual Tokens into multiple places in a single run.">This approach is kind-of an experiment - it's proven to improve performance a lot for big files that needs plenty of new tickets to be inserted,
like edge case example of 3.7h vs 4s (https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/3996#issuecomment-455617637),
yet at same time changing a logic of fixers in not-always easy way.

To be discuss:
- should we always aim to use this method?
- should we deprecate `insertAt` method ?

The `$slices` parameter is an assoc array, in which:
- index: starting point for inserting of individual slice, with indexes being relatives to original array collection before any Token inserted
- value under index: a slice of Tokens to be inserted</description>
      <internal/>
      <param description="array&lt;Token&gt;|Token|Tokens&gt; $slices" type="object">
        <type full="PhpCsFixer\Tokenizer\array&lt;int" namespace="PhpCsFixer\Tokenizer" name="array&lt;int"/>
      </param>
    </docblock>
    <parameter name="slices" byreference="false" type="array"/>
    <inline>
      <comment value="since we only move already existing items around, we directly call into SplFixedArray::offset* methods." line="957"/>
      <comment value="that way we get around additional overhead this class adds with overridden offset* methods." line="958"/>
    </inline>
  </method>
  <method name="isChanged" start="988" end="1003" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if collection was change: collection itself (like insert new tokens) or any of collection's elements."/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isEmptyAt" start="1010" end="1015" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="int" variable="$index"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="clearAt" start="1017" end="1020" abstract="false" final="false" static="false" visibility="public">
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="overrideAt" start="1030" end="1037" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Override token at given index and register it."/>
      <param type="int" variable="$index"/>
      <param description="token prototype" type="object" variable="$token">
        <type full="PhpCsFixer\Tokenizer\array|string|Token" namespace="PhpCsFixer\Tokenizer" name="array|string|Token"/>
      </param>
      <deprecated value="since 2.4, use offsetSet instead"/>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="token" byreference="false" type="{unknown}"/>
  </method>
  <method name="overrideRange" start="1046" end="1074" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Override tokens at given range."/>
      <param description="start overriding index" type="int" variable="$indexStart"/>
      <param description="end overriding index" type="int" variable="$indexEnd"/>
      <param description="tokens to insert" type="object" variable="$items">
        <type full="PhpCsFixer\Tokenizer\array&lt;Token&gt;|Tokens" namespace="PhpCsFixer\Tokenizer" name="array&lt;Token&gt;|Tokens"/>
      </param>
    </docblock>
    <parameter name="indexStart" byreference="false" type="{unknown}"/>
    <parameter name="indexEnd" byreference="false" type="{unknown}"/>
    <parameter name="items" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If we want to add more items than passed range contains we need to" line="1051"/>
      <comment value="add placeholders for overhead items." line="1052"/>
      <comment value="Override each items." line="1064"/>
      <comment value="If we want to add less tokens than passed range contains then clear" line="1069"/>
      <comment value="not needed tokens." line="1070"/>
    </inline>
  </method>
  <method name="removeLeadingWhitespace" start="1080" end="1083" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="int" variable="$index"/>
      <param description="optional whitespaces characters for Token::isWhitespace" type="object" variable="$whitespaces">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </param>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="whitespaces" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="removeTrailingWhitespace" start="1089" end="1092" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="int" variable="$index"/>
      <param description="optional whitespaces characters for Token::isWhitespace" type="object" variable="$whitespaces">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </param>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="whitespaces" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="setCode" start="1099" end="1134" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set code. Clear all current content and replace it by new Token items generated from code directly."/>
      <param description="PHP code" type="string" variable="$code"/>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="No need to work when the code is the same." line="1101"/>
      <comment value="That is how we avoid a lot of work and setting changed flag." line="1102"/>
      <comment value="clear memory" line="1107"/>
    </inline>
  </method>
  <method name="toJson" start="1136" end="1149" abstract="false" final="false" static="false" visibility="public"/>
  <method name="isAllTokenKindsFound" start="1156" end="1165" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if all token kinds given as argument are found."/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <parameter name="tokenKinds" byreference="false" type="array"/>
  </method>
  <method name="isAnyTokenKindsFound" start="1172" end="1181" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if any token kind given as argument is found."/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <parameter name="tokenKinds" byreference="false" type="array"/>
  </method>
  <method name="isTokenKindFound" start="1190" end="1193" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token kind given as argument is found."/>
      <param type="object" variable="$tokenKind">
        <type full="PhpCsFixer\Tokenizer\int|string" namespace="PhpCsFixer\Tokenizer" name="int|string"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <parameter name="tokenKind" byreference="false" type="{unknown}"/>
  </method>
  <method name="countTokenKind" start="1200" end="1207" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$tokenKind">
        <type full="PhpCsFixer\Tokenizer\int|string" namespace="PhpCsFixer\Tokenizer" name="int|string"/>
      </param>
      <return type="int"/>
    </docblock>
    <parameter name="tokenKind" byreference="false" type="{unknown}"/>
  </method>
  <method name="clearRange" start="1215" end="1220" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clear tokens in the given range."/>
      <param type="int" variable="$indexStart"/>
      <param type="int" variable="$indexEnd"/>
    </docblock>
    <parameter name="indexStart" byreference="false" type="{unknown}"/>
    <parameter name="indexEnd" byreference="false" type="{unknown}"/>
  </method>
  <method name="isMonolithicPhp" start="1230" end="1258" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks for monolithic PHP code.">Checks that the code is pure PHP code, in a single code block, starting
with an open tag.</description>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isPartialCodeMultiline" start="1266" end="1275" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="start index" type="int" variable="$start"/>
      <param description="end index" type="int" variable="$end"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <parameter name="start" byreference="false" type="{unknown}"/>
    <parameter name="end" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasAlternativeSyntax" start="1280" end="1290" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="clearTokenAndMergeSurroundingWhitespace" start="1295" end="1319" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="int" variable="$index"/>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="current" start="1326" end="1331" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <internal/>
      <deprecated value="Do not call directly, not available on PHP8 and will be removed in the future"/>
    </docblock>
  </method>
  <method name="key" start="1338" end="1343" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <internal/>
      <deprecated value="Do not call directly, not available on PHP8 and will be removed in the future"/>
    </docblock>
  </method>
  <method name="next" start="1350" end="1355" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <internal/>
      <deprecated value="Do not call directly, not available on PHP8 and will be removed in the future"/>
    </docblock>
  </method>
  <method name="rewind" start="1362" end="1367" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <internal/>
      <deprecated value="Do not call directly, not available on PHP8 and will be removed in the future"/>
    </docblock>
  </method>
  <method name="valid" start="1374" end="1379" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <internal/>
      <deprecated value="Do not call directly, not available on PHP8 and will be removed in the future"/>
    </docblock>
  </method>
  <method name="applyTransformers" start="1384" end="1388" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <internal/>
    </docblock>
  </method>
  <method name="warnPhp8SplFixerArrayChange" start="1390" end="1395" abstract="false" final="false" static="false" visibility="private">
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="removeWhitespaceSafely" start="1397" end="1425" abstract="false" final="false" static="false" visibility="private">
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="direction" byreference="false" type="{unknown}"/>
    <parameter name="whitespaces" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="findOppositeBlockEdge" start="1434" end="1502" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="type of block, one of BLOCK_TYPE_" type="int" variable="$type"/>
      <param description="index of starting brace" type="int" variable="$searchIndex"/>
      <param description="if method should find block's end or start" type="object" variable="$findEnd">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
      <return description="index of opposite brace" type="int"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="searchIndex" byreference="false" type="{unknown}"/>
    <parameter name="findEnd" byreference="false" type="{unknown}"/>
  </method>
  <method name="calculateCodeHash" start="1511" end="1514" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Calculate hash for code."/>
      <param type="string" variable="$code"/>
      <return type="string"/>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
  </method>
  <method name="getCache" start="1523" end="1530" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Get cache value for given key."/>
      <param description="item key" type="string" variable="$key"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasCache" start="1539" end="1542" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Check if given key exists in cache."/>
      <param description="item key" type="string" variable="$key"/>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="setCache" start="1548" end="1551" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description/>
      <param description="item key" type="string" variable="$key"/>
      <param description="item value" type="object" variable="$value">
        <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
      </param>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="object">
      <type full="PhpCsFixer\Tokenizer\self" namespace="PhpCsFixer\Tokenizer" name="self"/>
    </parameter>
  </method>
  <method name="changeCodeHash" start="1560" end="1568" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Change code hash.">Remove old cache and set new one.</description>
      <param description="new code hash" type="string" variable="$codeHash"/>
    </docblock>
    <parameter name="codeHash" byreference="false" type="{unknown}"/>
  </method>
  <method name="registerFoundToken" start="1575" end="1588" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Register token as found."/>
      <param description="token prototype" type="object" variable="$token">
        <type full="PhpCsFixer\Tokenizer\array|string|Token" namespace="PhpCsFixer\Tokenizer" name="array|string|Token"/>
      </param>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="inlined extractTokenKind() call on the hot path" line="1577"/>
    </inline>
  </method>
  <method name="unregisterFoundToken" start="1595" end="1608" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Register token as found."/>
      <param description="token prototype" type="object" variable="$token">
        <type full="PhpCsFixer\Tokenizer\array|string|Token" namespace="PhpCsFixer\Tokenizer" name="array|string|Token"/>
      </param>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="inlined extractTokenKind() call on the hot path" line="1597"/>
    </inline>
  </method>
  <method name="extractTokenKind" start="1615" end="1621" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="token prototype" type="object" variable="$token">
        <type full="PhpCsFixer\Tokenizer\array|string|Token" namespace="PhpCsFixer\Tokenizer" name="array|string|Token"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\int|string" namespace="PhpCsFixer\Tokenizer" name="int|string"/>
      </return>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}"/>
  </method>
  <method name="getTokenNotOfKind" start="1630" end="1645" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="token index" type="int" variable="$index"/>
      <param description="direction for looking, +1 or -1" type="int" variable="$direction"/>
      <param type="object" variable="$filter">
        <type full="PhpCsFixer\Tokenizer\callable" namespace="PhpCsFixer\Tokenizer" name="callable"/>
      </param>
      <return type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="direction" byreference="false" type="{unknown}"/>
    <parameter name="filter" byreference="false" type="{unknown}"/>
  </method>
  <extenders>
    <extender full="PhpCsFixer\Tests\Test\TokensWithObservedTransformers" namespace="PhpCsFixer\Tests\Test" name="TokensWithObservedTransformers"/>
  </extenders>
  <parent full="SplFixedArray" namespace="" name="SplFixedArray">
    <implements full="Iterator" namespace="" name="Iterator"/>
    <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Constructs a new fixed array"/>
      <return type="void"/>
    </docblock>
    <parameter name="size" optional="true" byreference="false" type="int"/>
  </constructor>
    <method name="count" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns the size of the array"/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="current" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Return current array entry"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="fromArray" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Import a PHP array in a SplFixedArray instance"/>
      <return type="SplFixedArray"/>
    </docblock>
    <parameter name="array" optional="false" byreference="false" type="object" class="array"/>
    <parameter name="save_indexes" optional="true" byreference="false" type="object" class="bool"/>
  </method>
    <method name="getSize" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Gets the size of the array"/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="key" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Return current array index"/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="next" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Move to next entry"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="offsetExists" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns whether the requested index exists"/>
      <return type="bool"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="int"/>
  </method>
    <method name="offsetGet" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns the value at the specified index"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="int"/>
  </method>
    <method name="offsetSet" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sets a new value at a specified index"/>
      <return type="void"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="int"/>
    <parameter name="newval" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetUnset" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Unsets the value at the specified $index"/>
      <return type="void"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="int"/>
  </method>
    <method name="rewind" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Rewind iterator back to the start"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="setSize" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Change the size of an array"/>
      <return type="bool"/>
    </docblock>
    <parameter name="size" optional="false" byreference="false" type="int"/>
  </method>
    <method name="toArray" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns a PHP array from the fixed array"/>
      <return type="array"/>
    </docblock>
  </method>
    <method name="valid" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Check whether the array contains more elements"/>
      <return type="bool"/>
    </docblock>
  </method>
    <method name="__wakeup" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Reinitialises the array after being unserialised"/>
      <return type="void"/>
    </docblock>
  </method>
  </parent>
  <interface full="Iterator" namespace="" name="Iterator">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="current" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Return the current element"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="key" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Return the key of the current element"/>
      <return type="scalar"/>
    </docblock>
  </method>
    <method name="next" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Move forward to next element">Moves the current position to the next element.</description>
      <return type="void"/>
    </docblock>
  </method>
    <method name="rewind" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Rewind the Iterator to the first element">Rewinds back to the first element of the Iterator.</description>
      <return type="void"/>
    </docblock>
  </method>
    <method name="valid" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Checks if current position is valid"/>
      <return type="bool"/>
    </docblock>
  </method>
  </interface>
</class>
