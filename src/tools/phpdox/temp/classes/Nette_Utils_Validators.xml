<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Nette\Utils\Validators" namespace="Nette\Utils" name="Validators" abstract="false" final="false" start="18" end="383">
  <file path="../vendor/nette/utils/src/Utils" file="Validators.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/nette/utils/src/Utils/Validators.php" size="9444" time="2022-01-24T11:29:14+00:00" unixtime="1643023754" sha1="2ff17eb07e53f03690a5c9ab46d3e92036c5099d" relative="vendor/nette/utils/src/Utils/Validators.php"/>
  <docblock>
    <description compact="Validation utilities."/>
  </docblock>
  <uses full="Nette\StaticClass" namespace="Nette" name="StaticClass" start="20" end="20"/>
  <member name="validators" default="" type="array" visibility="protected" static="true" line="23">
    <docblock>
      <var description="?callable&gt;" type="object">
        <type full="Nette\Utils\array&lt;string" namespace="Nette\Utils" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="counters" default="" type="array" visibility="protected" static="true" line="73">
    <docblock>
      <var description="callable&gt;" type="object">
        <type full="Nette\Utils\array&lt;string" namespace="Nette\Utils" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <method name="assert" start="93" end="107" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Verifies that the value is of expected types separated by pipe."/>
      <param type="mixed" variable="$value"/>
      <throws type="object">
        <type full="Nette\Utils\AssertionException" namespace="Nette\Utils" name="AssertionException"/>
      </throws>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="expected" byreference="false" type="string"/>
    <parameter name="label" byreference="false" type="string" default="'variable'"/>
  </method>
  <method name="assertField" start="116" end="128" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Verifies that element $key in array is of expected types separated by pipe."/>
      <param type="array" variable="$array" of="object">
        <type full="Nette\Utils\mixed" namespace="Nette\Utils" name="mixed"/>
      </param>
      <param type="object" variable="$key">
        <type full="Nette\Utils\int|string" namespace="Nette\Utils" name="int|string"/>
      </param>
      <throws type="object">
        <type full="Nette\Utils\AssertionException" namespace="Nette\Utils" name="AssertionException"/>
      </throws>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="array" byreference="false" type="array"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="expected" byreference="false" nullable="true" type="string" default="NULL"/>
    <parameter name="label" byreference="false" type="string" default="&quot;item '%' in array&quot;"/>
  </method>
  <method name="is" start="135" end="190" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Verifies that the value is of expected types separated by pipe."/>
      <param type="mixed" variable="$value"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="expected" byreference="false" type="string"/>
  </method>
  <method name="everyIs" start="197" end="206" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Finds whether all values are of expected types separated by pipe."/>
      <param type="array" variable="$values" of="object">
        <type full="Nette\Utils\mixed" namespace="Nette\Utils" name="mixed"/>
      </param>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="values" byreference="false" type="object">
      <type full="Nette\Utils\iterable" namespace="Nette\Utils" name="iterable"/>
    </parameter>
    <parameter name="expected" byreference="false" type="string"/>
  </method>
  <method name="isNumber" start="213" end="216" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is an integer or a float."/>
      <param type="mixed" variable="$value"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isNumericInt" start="223" end="226" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is an integer or a integer written in a string."/>
      <param type="mixed" variable="$value"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isNumeric" start="233" end="236" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is a number or a number written in a string."/>
      <param type="mixed" variable="$value"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isCallable" start="243" end="246" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is a syntactically correct callback."/>
      <param type="mixed" variable="$value"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isUnicode" start="253" end="256" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is a valid UTF-8 string."/>
      <param type="mixed" variable="$value"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isNone" start="263" end="266" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is 0, '', false or null."/>
      <param type="mixed" variable="$value"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="intentionally ==" line="265"/>
    </inline>
  </method>
  <method name="isMixed" start="270" end="273" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <internal/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isList" start="281" end="284" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if a variable is a zero-based integer indexed array."/>
      <param type="mixed" variable="$value"/>
      <deprecated value="use Nette\Utils\Arrays::isList"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isInRange" start="292" end="312" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is in the given range [min, max], where the upper or lower limit can be omitted (null).">Numbers, strings and DateTime objects can be compared.</description>
      <param type="mixed" variable="$value"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="range" byreference="false" type="array"/>
  </method>
  <method name="isEmail" start="318" end="331" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is a valid email address. It does not verify that the domain actually exists, only the syntax is verified."/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="string"/>
    <inline>
      <comment value="RFC 5322 unquoted characters in local-part" line="320"/>
      <comment value="superset of IDN" line="321"/>
    </inline>
  </method>
  <method name="isUrl" start="337" end="355" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is a valid URL address."/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="string"/>
  </method>
  <method name="isUri" start="361" end="364" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the value is a valid URI address, that is, actually a string beginning with a syntactically valid schema."/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="string"/>
  </method>
  <method name="isType" start="370" end="373" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks whether the input is a class, interface or trait."/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="type" byreference="false" type="string"/>
  </method>
  <method name="isPhpIdentifier" start="379" end="382" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks whether the input is a valid PHP identifier."/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="value" byreference="false" type="string"/>
  </method>
  <trait full="Nette\StaticClass" namespace="Nette" name="StaticClass">
    <constructor name="__construct" start="22" end="25" abstract="false" final="true" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="Nette\never" namespace="Nette" name="never"/>
        </return>
        <throws type="object">
          <type full="\Error" namespace="" name="Error"/>
        </throws>
      </docblock>
    </constructor>
    <method name="__callStatic" start="33" end="36" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Call to undefined static method."/>
        <return type="object">
          <type full="Nette\void" namespace="Nette" name="void"/>
        </return>
        <throws type="object">
          <type full="Nette\MemberAccessException" namespace="Nette" name="MemberAccessException"/>
        </throws>
      </docblock>
      <parameter name="name" byreference="false" type="string"/>
      <parameter name="args" byreference="false" type="array"/>
    </method>
  </trait>
</class>
