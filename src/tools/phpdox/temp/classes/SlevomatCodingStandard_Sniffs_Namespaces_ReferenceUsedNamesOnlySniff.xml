<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SlevomatCodingStandard\Sniffs\Namespaces\ReferenceUsedNamesOnlySniff" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="ReferenceUsedNamesOnlySniff" abstract="false" final="false" start="54" end="735">
  <file path="../vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Namespaces" file="ReferenceUsedNamesOnlySniff.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Namespaces/ReferenceUsedNamesOnlySniff.php" size="24676" time="2020-10-05T12:39:37+00:00" unixtime="1601901577" sha1="e47a4ac9b932e2c6ceb1c420c2706a6f21108447" relative="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Namespaces/ReferenceUsedNamesOnlySniff.php"/>
  <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
  <constant type="string" name="CODE_REFERENCE_VIA_FULLY_QUALIFIED_NAME" value="'ReferenceViaFullyQualifiedName'"/>
  <constant type="string" name="CODE_REFERENCE_VIA_FULLY_QUALIFIED_NAME_WITHOUT_NAMESPACE" value="'ReferenceViaFullyQualifiedNameWithoutNamespace'"/>
  <constant type="string" name="CODE_REFERENCE_VIA_FALLBACK_GLOBAL_NAME" value="'ReferenceViaFallbackGlobalName'"/>
  <constant type="string" name="CODE_PARTIAL_USE" value="'PartialUse'"/>
  <constant type="integer" name="SOURCE_CODE" value="1"/>
  <constant type="integer" name="SOURCE_ANNOTATION" value="2"/>
  <constant type="integer" name="SOURCE_ANNOTATION_CONSTANT_FETCH" value="3"/>
  <member name="searchAnnotations" default="false" type="boolean" visibility="public" static="false" line="70">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="fullyQualifiedKeywords" default="" type="array" visibility="public" static="false" line="73">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="allowFullyQualifiedExceptions" default="false" type="boolean" visibility="public" static="false" line="76">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="allowFullyQualifiedGlobalClasses" default="false" type="boolean" visibility="public" static="false" line="79">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="allowFullyQualifiedGlobalFunctions" default="false" type="boolean" visibility="public" static="false" line="82">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="allowFallbackGlobalFunctions" default="true" type="boolean" visibility="public" static="false" line="85">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="allowFullyQualifiedGlobalConstants" default="false" type="boolean" visibility="public" static="false" line="88">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="allowFallbackGlobalConstants" default="true" type="boolean" visibility="public" static="false" line="91">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="specialExceptionNames" default="" type="array" visibility="public" static="false" line="94">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="ignoredNames" default="" type="array" visibility="public" static="false" line="97">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="allowPartialUses" default="true" type="boolean" visibility="public" static="false" line="100">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="namespacesRequiredToUse" default="" type="array" visibility="public" static="false" line="107">
    <docblock>
      <description compact="If empty, all namespaces are required to be used"/>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="allowFullyQualifiedNameForCollidingClasses" default="false" type="boolean" visibility="public" static="false" line="110">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="allowFullyQualifiedNameForCollidingFunctions" default="false" type="boolean" visibility="public" static="false" line="113">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="allowFullyQualifiedNameForCollidingConstants" default="false" type="boolean" visibility="public" static="false" line="116">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="normalizedFullyQualifiedKeywords" visibility="private" static="false" line="119">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string[]|nu" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string[]|nu"/>
      </var>
    </docblock>
  </member>
  <member name="normalizedSpecialExceptionNames" visibility="private" static="false" line="122">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string[]|nu" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string[]|nu"/>
      </var>
    </docblock>
  </member>
  <member name="normalizedIgnoredNames" visibility="private" static="false" line="125">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string[]|nu" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string[]|nu"/>
      </var>
    </docblock>
  </member>
  <member name="normalizedNamespacesRequiredToUse" visibility="private" static="false" line="128">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string[]|nu" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string[]|nu"/>
      </var>
    </docblock>
  </member>
  <method name="register" start="133" end="138" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return description="(int|string)&gt;" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\array&lt;int" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="array&lt;int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="process" start="145" end="501" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <phpcssuppress value="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint"/>
      <param type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param type="int" variable="$openTagPointer"/>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="openTagPointer" byreference="false" type="{unknown}"/>
  </method>
  <method name="getSpecialExceptionNames" start="506" end="513" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getIgnoredNames" start="518" end="525" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getNamespacesRequiredToUse" start="530" end="537" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getFullyQualifiedKeywords" start="542" end="554" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getUseStatementPlacePointer" start="562" end="613" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param type="int" variable="$openTagPointer"/>
      <param type="array" variable="$useStatements" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\UseStatement" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="UseStatement"/>
      </param>
      <return type="int"/>
    </docblock>
    <return type="int" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="openTagPointer" byreference="false" type="int"/>
    <parameter name="useStatements" byreference="false" type="array"/>
  </method>
  <method name="isRequiredToBeUsed" start="615" end="630" abstract="false" final="false" static="false" visibility="private">
    <return type="bool" nullable="false"/>
    <parameter name="name" byreference="false" type="string"/>
  </method>
  <method name="getReferences" start="637" end="733" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param type="int" variable="$openTagPointer"/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\stdClass" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="stdClass"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="openTagPointer" byreference="false" type="int"/>
  </method>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
