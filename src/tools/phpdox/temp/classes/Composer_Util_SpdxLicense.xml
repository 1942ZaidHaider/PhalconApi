<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\Util\SpdxLicense" namespace="Composer\Util" name="SpdxLicense" abstract="false" final="false" start="22" end="24">
  <file path="../vendor/composer/composer/src/Composer/Util" file="SpdxLicense.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/composer/composer/src/Composer/Util/SpdxLicense.php" size="570" time="2022-04-13T14:39:56+00:00" unixtime="1649860796" sha1="c0f385518a8691c823e3bb168ea99e5fe8141599" relative="vendor/composer/composer/src/Composer/Util/SpdxLicense.php"/>
  <docblock>
    <description/>
    <deprecated value="use Composer\Spdx\SpdxLicenses instead"/>
  </docblock>
  <extends full="Composer\Spdx\SpdxLicenses" namespace="Composer\Spdx" name="SpdxLicenses"/>
  <parent full="Composer\Spdx\SpdxLicenses" namespace="Composer\Spdx" name="SpdxLicenses">
    <constant type="{unknown}" name="LICENSES_FILE" value="'spdx-licenses.json'">
      <docblock>
        <var type="string"/>
      </docblock>
    </constant>
    <constant type="{unknown}" name="EXCEPTIONS_FILE" value="'spdx-exceptions.json'">
      <docblock>
        <var type="string"/>
      </docblock>
    </constant>
    <constructor name="__construct" start="62" end="66" abstract="false" final="false" static="false" visibility="public"/>
    <method name="getLicenseByIdentifier" start="80" end="96" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns license metadata by license identifier.">This function adds a link to the full license text to the license metadata.
The array returned is in the form of:

 [ 0 =&gt; full name (string), 1 =&gt; osi certified, 2 =&gt; link to license text (string), 3 =&gt; deprecation status (bool) ]</description>
        <param type="string" variable="$identifier"/>
        <return description="string, 1: bool, 2: string, 3: bool}|null" type="object">
          <type full="Composer\Spdx\array{0:" namespace="Composer\Spdx" name="array{0:"/>
        </return>
      </docblock>
      <parameter name="identifier" byreference="false" type="{unknown}"/>
    </method>
    <method name="getLicenses" start="103" end="106" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns all licenses information, keyed by the lowercased license identifier."/>
        <return description="string, 1: string, 2: bool, 3: bool}[] Each item is [ 0 =&gt; identifier (string), 1 =&gt; full name (string), 2 =&gt; osi certified (bool), 3 =&gt; deprecated (bool) ]" type="object">
          <type full="Composer\Spdx\array{0:" namespace="Composer\Spdx" name="array{0:"/>
        </return>
      </docblock>
    </method>
    <method name="getExceptionByIdentifier" start="120" end="134" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns license exception metadata by license exception identifier.">This function adds a link to the full license exception text to the license exception metadata.
The array returned is in the form of:

 [ 0 =&gt; full name (string), 1 =&gt; link to license text (string) ]</description>
        <param type="string" variable="$identifier"/>
        <return description="string, 1: string}|null" type="object">
          <type full="Composer\Spdx\array{0:" namespace="Composer\Spdx" name="array{0:"/>
        </return>
      </docblock>
      <parameter name="identifier" byreference="false" type="{unknown}"/>
    </method>
    <method name="getIdentifierByName" start="143" end="158" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the short identifier of a license (or license exception) by full name."/>
        <param type="string" variable="$name"/>
        <return type="object">
          <type full="Composer\Spdx\string|null" namespace="Composer\Spdx" name="string|null"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="isOsiApprovedByIdentifier" start="167" end="170" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the OSI Approved status for a license by identifier."/>
        <param type="string" variable="$identifier"/>
        <return type="object">
          <type full="Composer\Spdx\bool" namespace="Composer\Spdx" name="bool"/>
        </return>
      </docblock>
      <parameter name="identifier" byreference="false" type="{unknown}"/>
    </method>
    <method name="isDeprecatedByIdentifier" start="179" end="182" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the deprecation status for a license by identifier."/>
        <param type="string" variable="$identifier"/>
        <return type="object">
          <type full="Composer\Spdx\bool" namespace="Composer\Spdx" name="bool"/>
        </return>
      </docblock>
      <parameter name="identifier" byreference="false" type="{unknown}"/>
    </method>
    <method name="validate" start="191" end="209" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="array" variable="$license" of="object">
          <type full="Composer\Spdx\string[]|stri" namespace="Composer\Spdx" name="string[]|stri"/>
        </param>
        <throws type="object">
          <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
        </throws>
        <return type="object">
          <type full="Composer\Spdx\bool" namespace="Composer\Spdx" name="bool"/>
        </return>
      </docblock>
      <parameter name="license" byreference="false" type="{unknown}"/>
    </method>
    <method name="getResourcesDir" start="214" end="217" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
  </parent>
</class>
