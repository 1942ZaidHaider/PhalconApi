<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\Util\TlsHelper" namespace="Composer\Util" name="TlsHelper" abstract="false" final="true" start="20" end="202">
  <file path="../vendor/composer/composer/src/Composer/Util" file="TlsHelper.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/composer/composer/src/Composer/Util/TlsHelper.php" size="6624" time="2022-04-13T14:39:56+00:00" unixtime="1649860796" sha1="38fbab19e2dd811253e59ceb7a68a7bbb7901ab6" relative="vendor/composer/composer/src/Composer/Util/TlsHelper.php"/>
  <docblock>
    <description/>
    <author value="Chris Smith &lt;chris@cs278.org&gt;"/>
  </docblock>
  <method name="checkCertificateHost" start="31" end="53" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Match hostname against a certificate."/>
      <param description="X.509 certificate" type="mixed" variable="$certificate"/>
      <param description="Hostname in the URL" type="string" variable="$hostname"/>
      <param description="Set to the common name of the certificate iff match found" type="string" variable="$cn"/>
      <return type="object">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </return>
    </docblock>
    <parameter name="certificate" byreference="false" type="{unknown}"/>
    <parameter name="hostname" byreference="false" type="{unknown}"/>
    <parameter name="cn" byreference="true" type="{unknown}" default="NULL"/>
  </method>
  <method name="getCertificateNames" start="62" end="93" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Extract DNS names out of an X.509 certificate."/>
      <param description="X.509 certificate" type="mixed" variable="$certificate"/>
      <return type="object">
        <type full="Composer\Util\array|null" namespace="Composer\Util" name="array|null"/>
      </return>
    </docblock>
    <parameter name="certificate" byreference="false" type="{unknown}"/>
  </method>
  <method name="getCertificateFingerprint" start="134" end="145" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the certificate pin.">By Kevin McArthur of StormTide Digital Studios Inc.</description>
      <kevinsmcarthur value="/ https://github.com/StormTide See http://tools.ietf.org/html/draft-ietf-websec-key-pinning-02  This method was adapted from Sslurp. https://github.com/EvanDotPro/Sslurp  (c) Evan Coury &lt;me@evancoury.com&gt;  For the full copyright and license information, please see below:  Copyright (c) 2013, Evan Coury All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."/>
    </docblock>
    <parameter name="certificate" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Convert PEM to DER before SHA1'ing" line="138"/>
    </inline>
  </method>
  <method name="isOpensslParseSafe" start="155" end="158" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Test if it is safe to use the PHP function openssl_x509_parse().">This checks if OpenSSL extensions is vulnerable to remote code execution
via the exploit documented as CVE-2013-6420.</description>
      <return type="object">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="certNameMatcher" start="167" end="201" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Convert certificate name into matching function."/>
      <param description="CN/SAN" type="string" variable="$certName"/>
      <return type="object">
        <type full="Composer\Util\callable|void" namespace="Composer\Util" name="callable|void"/>
      </return>
    </docblock>
    <parameter name="certName" byreference="false" type="{unknown}"/>
  </method>
</class>
