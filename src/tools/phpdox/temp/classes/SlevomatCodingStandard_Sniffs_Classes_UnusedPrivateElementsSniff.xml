<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff" namespace="SlevomatCodingStandard\Sniffs\Classes" name="UnusedPrivateElementsSniff" abstract="false" final="false" start="63" end="702">
  <file path="../vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Classes" file="UnusedPrivateElementsSniff.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Classes/UnusedPrivateElementsSniff.php" size="23071" time="2020-10-05T12:39:37+00:00" unixtime="1601901577" sha1="f74a39a668da660c5d020a3f0a343034bddb53e3" relative="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Classes/UnusedPrivateElementsSniff.php"/>
  <docblock>
    <description/>
    <deprecated value="https://phpstan.org/blog/detecting-unused-private-properties-methods-constants"/>
  </docblock>
  <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
  <constant type="string" name="CODE_UNUSED_PROPERTY" value="'UnusedProperty'"/>
  <constant type="string" name="CODE_WRITE_ONLY_PROPERTY" value="'WriteOnlyProperty'"/>
  <constant type="string" name="CODE_UNUSED_METHOD" value="'UnusedMethod'"/>
  <constant type="string" name="CODE_UNUSED_CONSTANT" value="'UnusedConstant'"/>
  <constant type="string" name="NAME" value="'SlevomatCodingStandard.Classes.UnusedPrivateElements'"/>
  <member name="alwaysUsedPropertiesAnnotations" default="" type="array" visibility="public" static="false" line="77">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="alwaysUsedPropertiesSuffixes" default="" type="array" visibility="public" static="false" line="80">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="alwaysUsedMethodsAnnotations" default="" type="array" visibility="public" static="false" line="83">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="normalizedAlwaysUsedPropertiesAnnotations" visibility="private" static="false" line="86">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string[]|nu" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string[]|nu"/>
      </var>
    </docblock>
  </member>
  <member name="normalizedAlwaysUsedPropertiesSuffixes" visibility="private" static="false" line="89">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string[]|nu" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string[]|nu"/>
      </var>
    </docblock>
  </member>
  <member name="normalizedAlwaysUsedMethodsAnnotations" visibility="private" static="false" line="92">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string[]|nu" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string[]|nu"/>
      </var>
    </docblock>
  </member>
  <method name="register" start="97" end="102" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return description="(int|string)&gt;" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\array&lt;int" namespace="SlevomatCodingStandard\Sniffs\Classes" name="array&lt;int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="process" start="109" end="431" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <phpcssuppress value="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint"/>
      <param type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param type="int" variable="$classPointer"/>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="classPointer" byreference="false" type="{unknown}"/>
  </method>
  <method name="getAlwaysUsedPropertiesAnnotations" start="436" end="443" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getAlwaysUsedPropertiesSuffixes" start="448" end="455" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getAlwaysUsedMethodsAnnotations" start="460" end="467" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getSniffName" start="469" end="472" abstract="false" final="false" static="false" visibility="private">
    <return type="string" nullable="false"/>
    <parameter name="sniffName" byreference="false" type="string"/>
  </method>
  <method name="getProperties" start="479" end="544" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param type="int" variable="$classTokenPointer"/>
      <return description="string(name) =&gt; pointer" type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\int" namespace="SlevomatCodingStandard\Sniffs\Classes" name="int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="classTokenPointer" byreference="false" type="int"/>
  </method>
  <method name="getAnnotationNames" start="551" end="554" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param type="int" variable="$privateTokenPointer"/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="privateTokenPointer" byreference="false" type="int"/>
  </method>
  <method name="getMethods" start="561" end="616" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param type="int" variable="$classTokenPointer"/>
      <return description="string(name) =&gt; pointer" type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\int" namespace="SlevomatCodingStandard\Sniffs\Classes" name="int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="classTokenPointer" byreference="false" type="int"/>
  </method>
  <method name="getNormalizedMethodName" start="618" end="621" abstract="false" final="false" static="false" visibility="private">
    <return type="string" nullable="false"/>
    <parameter name="methodName" byreference="false" type="string"/>
  </method>
  <method name="getNormalizedPropertyName" start="623" end="626" abstract="false" final="false" static="false" visibility="private">
    <return type="string" nullable="false"/>
    <parameter name="propertyName" byreference="false" type="string"/>
  </method>
  <method name="getConstants" start="633" end="667" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param type="int" variable="$classTokenPointer"/>
      <return description="string(name) =&gt; pointer" type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\int" namespace="SlevomatCodingStandard\Sniffs\Classes" name="int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="classTokenPointer" byreference="false" type="int"/>
  </method>
  <method name="findVisibilityPointer" start="669" end="700" abstract="false" final="false" static="false" visibility="private">
    <return type="int" nullable="true"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
  </method>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
