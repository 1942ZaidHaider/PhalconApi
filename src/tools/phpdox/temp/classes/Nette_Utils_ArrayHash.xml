<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Nette\Utils\ArrayHash" namespace="Nette\Utils" name="ArrayHash" abstract="false" final="false" start="19" end="103">
  <file path="../vendor/nette/utils/src/Utils" file="ArrayHash.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/nette/utils/src/Utils/ArrayHash.php" size="1831" time="2022-01-24T11:29:14+00:00" unixtime="1643023754" sha1="407db93f14cd4f2dabff80e3b8b6f9ad895745ae" relative="vendor/nette/utils/src/Utils/ArrayHash.php"/>
  <docblock>
    <description compact="Provides objects to work as array."/>
    <template value="T"/>
  </docblock>
  <extends full="stdClass" namespace="" name="stdClass" unresolved="true"/>
  <implements full="ArrayAccess" namespace="" name="ArrayAccess"/>
  <implements full="Countable" namespace="" name="Countable"/>
  <implements full="IteratorAggregate" namespace="" name="IteratorAggregate"/>
  <method name="from" start="26" end="36" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Transforms array to ArrayHash."/>
      <param type="object" variable="$array">
        <type full="Nette\Utils\array&lt;T&gt;" namespace="Nette\Utils" name="array&lt;T&gt;"/>
      </param>
      <return resolution="static" type="object">
        <type full="Nette\Utils\ArrayHash" namespace="Nette\Utils" name="ArrayHash"/>
      </return>
    </docblock>
    <parameter name="array" byreference="false" type="array"/>
    <parameter name="recursive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="getIterator" start="43" end="46" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an iterator over all items."/>
      <return description="T&gt;" type="object">
        <type full="\RecursiveArrayIterator&lt;array-key" namespace="" name="RecursiveArrayIterator&lt;array-key"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="RecursiveArrayIterator" namespace="" name="RecursiveArrayIterator"/>
    </return>
  </method>
  <method name="count" start="52" end="55" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns items count."/>
    </docblock>
    <return type="int" nullable="false"/>
  </method>
  <method name="offsetSet" start="63" end="70" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Replaces or appends a item."/>
      <param type="object" variable="$key">
        <type full="Nette\Utils\string|int" namespace="Nette\Utils" name="string|int"/>
      </param>
      <param type="object" variable="$value">
        <type full="Nette\Utils\T" namespace="Nette\Utils" name="T"/>
      </param>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="offsetGet" start="79" end="82" abstract="false" final="false" static="false" visibility="public">
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="offsetExists" start="89" end="92" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determines whether a item exists."/>
      <param type="object" variable="$key">
        <type full="Nette\Utils\string|int" namespace="Nette\Utils" name="string|int"/>
      </param>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="offsetUnset" start="99" end="102" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes the element from this list."/>
      <param type="object" variable="$key">
        <type full="Nette\Utils\string|int" namespace="Nette\Utils" name="string|int"/>
      </param>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <interface full="ArrayAccess" namespace="" name="ArrayAccess">
    <method name="offsetExists" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Whether an offset exists">Whether or not an offset exists.</description>
      <return type="bool"/>
    </docblock>
    <parameter name="offset" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetGet" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Offset to retrieve">Returns the value at specified offset.</description>
      <return type="mixed"/>
    </docblock>
    <parameter name="offset" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetSet" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Assign a value to the specified offset"/>
      <return type="void"/>
    </docblock>
    <parameter name="offset" optional="false" byreference="false" type="object" class="mixed"/>
    <parameter name="value" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetUnset" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Unset an offset">Unsets an offset.</description>
      <return type="void"/>
    </docblock>
    <parameter name="offset" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
  </interface>
  <interface full="Countable" namespace="" name="Countable">
    <method name="count" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Count elements of an object"/>
      <return type="int"/>
    </docblock>
  </method>
  </interface>
  <interface full="IteratorAggregate" namespace="" name="IteratorAggregate">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="getIterator" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Retrieve an external iterator"/>
      <return type="Traversable"/>
    </docblock>
  </method>
  </interface>
</class>
