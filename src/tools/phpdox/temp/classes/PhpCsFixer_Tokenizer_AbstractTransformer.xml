<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PhpCsFixer\Tokenizer\AbstractTransformer" namespace="PhpCsFixer\Tokenizer" name="AbstractTransformer" abstract="true" final="false" start="22" end="47">
  <file path="../vendor/friendsofphp/php-cs-fixer/src/Tokenizer" file="AbstractTransformer.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/friendsofphp/php-cs-fixer/src/Tokenizer/AbstractTransformer.php" size="919" time="2021-11-15T17:17:55+00:00" unixtime="1636996675" sha1="89aa12a864f1f43f8bd7afba0c87332da0c6a63d" relative="vendor/friendsofphp/php-cs-fixer/src/Tokenizer/AbstractTransformer.php"/>
  <docblock>
    <description/>
    <author value="Dariusz RumiÅ„ski &lt;dariusz.ruminski@gmail.com&gt;"/>
    <internal/>
  </docblock>
  <implements full="PhpCsFixer\Tokenizer\TransformerInterface" namespace="PhpCsFixer\Tokenizer" name="TransformerInterface"/>
  <method name="getName" start="27" end="33" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
  </method>
  <method name="getPriority" start="38" end="41" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
  </method>
  <method name="getCustomTokens" start="46" end="46" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
  </method>
  <extenders>
    <extender full="PhpCsFixer\Tokenizer\Transformer\NamespaceOperatorTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="NamespaceOperatorTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\TypeColonTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="TypeColonTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\UseTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="UseTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\ConstructorPromotionTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="ConstructorPromotionTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\NameQualifiedTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="NameQualifiedTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\ReturnRefTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="ReturnRefTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\ArrayTypehintTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="ArrayTypehintTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\WhitespacyCommentTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="WhitespacyCommentTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\TypeAlternationTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="TypeAlternationTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\NullableTypeTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="NullableTypeTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\CurlyBraceTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="CurlyBraceTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\BraceClassInstantiationTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="BraceClassInstantiationTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\SquareBraceTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="SquareBraceTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\NamedArgumentTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="NamedArgumentTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\ClassConstantTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="ClassConstantTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\ImportTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="ImportTransformer"/>
    <extender full="PhpCsFixer\Tokenizer\Transformer\AttributeTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="AttributeTransformer"/>
  </extenders>
  <interface full="PhpCsFixer\Tokenizer\TransformerInterface" namespace="PhpCsFixer\Tokenizer" name="TransformerInterface">
    <method name="getCustomTokens" start="34" end="34" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get tokens created by Transformer."/>
        <return type="array" of="object">
          <type full="PhpCsFixer\Tokenizer\int" namespace="PhpCsFixer\Tokenizer" name="int"/>
        </return>
      </docblock>
    </method>
    <method name="getName" start="43" end="43" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the name of the transformer.">The name must be all lowercase and without any spaces.</description>
        <return description="The name of the fixer" type="string"/>
      </docblock>
    </method>
    <method name="getPriority" start="52" end="52" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the priority of the transformer.">The default priority is 0 and higher priorities are executed first.</description>
        <return type="int"/>
      </docblock>
    </method>
    <method name="getRequiredPhpVersionId" start="64" end="64" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return minimal required PHP version id to transform the code.">Custom Token kinds from Transformers are always registered, but sometimes
there is no need to analyse the Tokens if for sure we cannot find examined
token kind, eg transforming `T_FUNCTION` in `&lt;?php use function Foo\\bar;`
code.</description>
        <return type="int"/>
      </docblock>
    </method>
    <method name="process" start="71" end="71" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Process Token to transform it into custom token when needed."/>
        <param type="int" variable="$index"/>
      </docblock>
      <parameter name="tokens" byreference="false" type="object">
        <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
      </parameter>
      <parameter name="token" byreference="false" type="object">
        <type full="PhpCsFixer\Tokenizer\Token" namespace="PhpCsFixer\Tokenizer" name="Token"/>
      </parameter>
      <parameter name="index" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
