<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="../vendor/league/container/src/Definition" file="DefinitionAggregateInterface.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/league/container/src/Definition/DefinitionAggregateInterface.php" size="1541" time="2021-07-09T08:23:52+00:00" unixtime="1625819032" sha1="9d3cc49c09b95bafd81c2d8f643215e90a5672e5" relative="vendor/league/container/src/Definition/DefinitionAggregateInterface.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php </token>
    <token name="T_DECLARE">declare</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">strict_types</token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">League</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Container</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Definition</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="4"/>
  <line no="5">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">IteratorAggregate</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="6">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">League</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Container</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">ContainerAwareInterface</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="7"/>
  <line no="8">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DefinitionAggregateInterface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_EXTENDS">extends</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ContainerAwareInterface</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">IteratorAggregate</token>
  </line>
  <line no="9">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="10">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT">     * Add a definition to the aggregate.</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT">     * @param string  $id</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT">     * @param mixed   $definition</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT">     * @param boolean $shared</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT">     * @return DefinitionInterface</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="19">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">add</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">string</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$id</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$definition</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">bool</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$shared</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DefinitionInterface</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="20"/>
  <line no="21">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT">     * Checks whether alias exists as definition.</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     * @param string $id</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     * @return boolean</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="28">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">has</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">string</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$id</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">bool</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="29"/>
  <line no="30">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">     * Checks whether tag exists as definition.</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">     * @param string $tag</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">     * @return boolean</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="37">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">hasTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">string</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">bool</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="38"/>
  <line no="39">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">     * Get the definition to be extended.</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     * @param string $id</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     * @return DefinitionInterface</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="46">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getDefinition</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">string</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$id</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DefinitionInterface</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="47"/>
  <line no="48">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">     * Resolve and build a concrete value from an id/alias.</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">     * @param string  $id</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">     * @param boolean $new</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">     * @return mixed</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="56">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">resolve</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">string</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$id</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">bool</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="57"/>
  <line no="58">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">     * Resolve and build an array of concrete values from a tag.</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">     * @param string  $tag</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">     * @param boolean $new</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">     * @return mixed</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">resolveTagged</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">string</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">bool</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="67">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="68"/>
</source>
