<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="../vendor/theseer/fdomdocument/src/css" file="Translator.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/theseer/fdomdocument/src/css/Translator.php" size="6017" time="2022-01-25T23:10:35+00:00" unixtime="1643152235" sha1="84043fb9cdfcfad318bf82c62bb91eac17542664" relative="vendor/theseer/fdomdocument/src/css/Translator.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3">
    <token name="T_DOC_COMMENT"> * Copyright (c) 2010-2017 Arne Blankerts &lt;arne@blankerts.de&gt;</token>
  </line>
  <line no="4">
    <token name="T_DOC_COMMENT"> * All rights reserved.</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * Redistribution and use in source and binary forms, with or without modification,</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> * are permitted provided that the following conditions are met:</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> *   * Redistributions of source code must retain the above copyright notice,</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> *     this list of conditions and the following disclaimer.</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> *   * Redistributions in binary form must reproduce the above copyright notice,</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> *     this list of conditions and the following disclaimer in the documentation</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> *     and/or other materials provided with the distribution.</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> *   * Neither the name of Arne Blankerts nor the names of contributors</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT"> *     may be used to endorse or promote products derived from this software</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> *     without specific prior written permission.</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT"> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO,</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT"> * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT"> * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER ORCONTRIBUTORS</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT"> * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT"> * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT"> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT"> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT"> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT"> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT"> * POSSIBILITY OF SUCH DAMAGE.</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT"> * @category  PHP</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT"> * @package   TheSeer\fDOM</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT"> * @author    Arne Blankerts &lt;arne@blankerts.de&gt;</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT"> * @copyright Arne Blankerts &lt;arne@blankerts.de&gt;, All rights reserved.</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT"> * @license   http://www.opensource.org/licenses/bsd-license.php  BSD License</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT"> * @link      http://github.com/theseer/fdomdocument</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="41"/>
  <line no="42">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">TheSeer</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">fDOM</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">CSS</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="43"/>
  <line no="44">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     * Class Translator</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">     * The regular expressions used in this class are heavily inspired by and mostly adopted from</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">     * the css2xpath.js code by Andrea Giammarchi (http://code.google.com/p/css2xpath/).</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">     * The JavaScript version (css2xpath.js) is licensed under the MIT License</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="52">
    <token name="T_WHITESPACE">    </token>
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Translator</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="53"/>
  <line no="54">
    <token name="T_WHITESPACE">        </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">         * @var array</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">         */</token>
  </line>
  <line no="57">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PRIVATE">private</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$rules</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="58"/>
  <line no="59">
    <token name="T_WHITESPACE">        </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">         * @param string $selector A CSS Selector string</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">         *</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">         * @return string</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">         */</token>
  </line>
  <line no="64">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">translate</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="65">
    <token name="T_WHITESPACE">            </token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getRules</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$rule</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">                </token>
    <token name="T_DOC_COMMENT">/** @var RuleInterface $rule */</token>
  </line>
  <line no="67">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$rule</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">apply</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="68">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="69">
    <token name="T_WHITESPACE">            </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'//'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$selector</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="70">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="71"/>
  <line no="72">
    <token name="T_WHITESPACE">        </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">         * @return array</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">         */</token>
  </line>
  <line no="75">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PRIVATE">private</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getRules</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="76">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">rules</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_EQUAL">!=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">NULL</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="77">
    <token name="T_WHITESPACE">                </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">rules</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="78">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="79"/>
  <line no="80">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">rules</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="81"/>
  <line no="82">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// prefix|name</token>
  </line>
  <line no="83">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/([a-zA-Z0-9\_\-\*]+)\|([a-zA-Z0-9\_\-\*]+)/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1:$2'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="84"/>
  <line no="85">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// add @ for attribs</token>
  </line>
  <line no="86">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\[([^\]~\$\*\^\|\!]+)(=[^\]]+)?\]/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[@$1$2]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="87"/>
  <line no="88">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// multiple queries</token>
  </line>
  <line no="89">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\s*,\s*/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'|'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="90"/>
  <line no="91">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// , + ~ &gt;</token>
  </line>
  <line no="92">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\s*(\+|~|&gt;)\s*/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="93"/>
  <line no="94">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">//* ~ + &gt;</token>
  </line>
  <line no="95">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/([a-zA-Z0-9\_\-\*])~([a-zA-Z0-9\_\-\*])/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1/following-sibling::$2'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="96">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/([a-zA-Z0-9\_\-\*])\+([a-zA-Z0-9\_\-\*])/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1/following-sibling::*[1]/self::$2'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="97">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/([a-zA-Z0-9\_\-\*])&gt;([a-zA-Z0-9\_\-\*])/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1/$2'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="98"/>
  <line no="99">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// all unescaped stuff escaped</token>
  </line>
  <line no="100">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\[([^=]+)=([^'|'][^\]]*)\]/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[$1="$2"]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="101"/>
  <line no="102">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// all descendant or self to //</token>
  </line>
  <line no="103">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/(^|[^a-zA-Z0-9\_\-\*])(#|\.)([a-zA-Z0-9\_\-]+)/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1*$2$3'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="104">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/([\&gt;\+\|\~\,\s])([a-zA-Z\*]+)/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1//$2'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="105">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\s+\/\//"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'//'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="106"/>
  <line no="107">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// :first-child</token>
  </line>
  <line no="108">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/([a-zA-Z0-9\_\-\*]+):first-child/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'*[1]/self::$1'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="109"/>
  <line no="110">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// :last-child</token>
  </line>
  <line no="111">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/([a-zA-Z0-9\_\-\*]+):last-child/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1[not(following-sibling::*)]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="112"/>
  <line no="113">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// :only-child</token>
  </line>
  <line no="114">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/([a-zA-Z0-9\_\-\*]+):only-child/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'*[last()=1]/self::$1'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="115"/>
  <line no="116">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// :empty</token>
  </line>
  <line no="117">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/([a-zA-Z0-9\_\-\*]+):empty/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$1[not(*) and not(normalize-space())]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="118"/>
  <line no="119">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// :not</token>
  </line>
  <line no="120">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">NotRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="121"/>
  <line no="122">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// :nth-child</token>
  </line>
  <line no="123">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">NthChildRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="124"/>
  <line no="125">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// :contains(selectors)</token>
  </line>
  <line no="126">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/:contains\(([^\)]*)\)/'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[contains(string(.),"$1")]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="127"/>
  <line no="128">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// |= attrib</token>
  </line>
  <line no="129">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\[([a-zA-Z0-9\_\-]+)\|=([^\]]+)\]/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[@$1=$2 or starts-with(@$1,concat($2,"-"))]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="130"/>
  <line no="131">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// *= attrib</token>
  </line>
  <line no="132">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\[([a-zA-Z0-9\_\-]+)\*=([^\]]+)\]/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[contains(@$1,$2)]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="133"/>
  <line no="134">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// ~= attrib</token>
  </line>
  <line no="135">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\[([a-zA-Z0-9\_\-]+)~=([^\]]+)\]/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[contains(concat(" ",normalize-space(@$1)," "),concat(" ",$2," "))]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="136"/>
  <line no="137">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// ^= attrib</token>
  </line>
  <line no="138">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\[([a-zA-Z0-9\_\-]+)\^=([^\]]+)\]/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[starts-with(@$1,$2)]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="139"/>
  <line no="140">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// $= attrib</token>
  </line>
  <line no="141">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DollarEqualRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="142"/>
  <line no="143">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// != attrib</token>
  </line>
  <line no="144">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\[([a-zA-Z0-9\_\-]+)\!=([^\]]+)\]/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[not(@$1) or @$1!=$2]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="145"/>
  <line no="146">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// ids and classes</token>
  </line>
  <line no="147">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/#([a-zA-Z0-9\_\-]+)/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[@id="$1"]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="148">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\.([a-zA-Z0-9\_\-]+)/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[contains(concat(" ",normalize-space(@class)," ")," $1 ")]'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="149"/>
  <line no="150">
    <token name="T_WHITESPACE">                </token>
    <token name="T_COMMENT">// normalize multiple filters</token>
  </line>
  <line no="151">
    <token name="T_WHITESPACE">                </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">RegexRule</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"/\]\[([^\]]+)/"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' and ($1)'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="152"/>
  <line no="153">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="154">
    <token name="T_WHITESPACE">            </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">rules</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="155">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="156">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="157"/>
  <line no="158">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="159"/>
</source>
