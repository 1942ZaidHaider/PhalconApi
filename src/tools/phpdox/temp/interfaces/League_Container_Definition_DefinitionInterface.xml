<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface" abstract="false" final="false" start="7" end="120">
  <file path="../vendor/league/container/src/Definition" file="DefinitionInterface.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/league/container/src/Definition/DefinitionInterface.php" size="2489" time="2021-07-09T08:23:52+00:00" unixtime="1625819032" sha1="6621cf49c899307fa04a70b78b2afa9c34cfe211" relative="vendor/league/container/src/Definition/DefinitionInterface.php"/>
  <extends full="League\Container\ContainerAwareInterface" namespace="League\Container" name="ContainerAwareInterface"/>
  <method name="addTag" start="16" end="16" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a tag to the definition."/>
      <param type="string" variable="$tag"/>
      <return resolution="self" type="object">
        <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
    </return>
    <parameter name="tag" byreference="false" type="string"/>
  </method>
  <method name="hasTag" start="25" end="25" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Does the definition have a tag?"/>
      <param type="string" variable="$tag"/>
      <return type="boolean"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="tag" byreference="false" type="string"/>
  </method>
  <method name="setAlias" start="34" end="34" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the alias of the definition."/>
      <param type="string" variable="$id"/>
      <return type="object">
        <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
    </return>
    <parameter name="id" byreference="false" type="string"/>
  </method>
  <method name="getAlias" start="41" end="41" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the alias of the definition."/>
      <return type="string"/>
    </docblock>
    <return type="string" nullable="false"/>
  </method>
  <method name="setShared" start="50" end="50" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set whether this is a shared definition."/>
      <param type="boolean" variable="$shared"/>
      <return resolution="self" type="object">
        <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
    </return>
    <parameter name="shared" byreference="false" type="bool"/>
  </method>
  <method name="isShared" start="57" end="57" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Is this a shared definition?"/>
      <return type="boolean"/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="getConcrete" start="64" end="64" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the concrete of the definition."/>
      <return type="mixed"/>
    </docblock>
  </method>
  <method name="setConcrete" start="73" end="73" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the concrete of the definition."/>
      <param type="mixed" variable="$concrete"/>
      <return type="object">
        <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
    </return>
    <parameter name="concrete" byreference="false" type="{unknown}"/>
  </method>
  <method name="addArgument" start="82" end="82" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an argument to be injected."/>
      <param type="mixed" variable="$arg"/>
      <return resolution="self" type="object">
        <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
    </return>
    <parameter name="arg" byreference="false" type="{unknown}"/>
  </method>
  <method name="addArguments" start="91" end="91" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add multiple arguments to be injected."/>
      <param type="array" variable="$args"/>
      <return resolution="self" type="object">
        <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
    </return>
    <parameter name="args" byreference="false" type="array"/>
  </method>
  <method name="addMethodCall" start="101" end="101" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a method to be invoked"/>
      <param type="string" variable="$method"/>
      <param type="array" variable="$args"/>
      <return resolution="self" type="object">
        <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
    </return>
    <parameter name="method" byreference="false" type="string"/>
    <parameter name="args" byreference="false" type="array" default=""/>
  </method>
  <method name="addMethodCalls" start="110" end="110" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add multiple methods to be invoked"/>
      <param type="array" variable="$methods"/>
      <return resolution="self" type="object">
        <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="League\Container\Definition\DefinitionInterface" namespace="League\Container\Definition" name="DefinitionInterface"/>
    </return>
    <parameter name="methods" byreference="false" type="array" default=""/>
  </method>
  <method name="resolve" start="119" end="119" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Handle instantiation and manipulation of value and return."/>
      <param type="boolean" variable="$new"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="new" byreference="false" type="boolean" default="false"/>
  </method>
  <parent full="League\Container\ContainerAwareInterface" namespace="League\Container" name="ContainerAwareInterface">
    <method name="setContainer" start="16" end="16" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a container"/>
        <param type="object" variable="$container">
          <type full="Psr\Container\ContainerInterface" namespace="Psr\Container" name="ContainerInterface"/>
        </param>
        <return resolution="self" type="object">
          <type full="League\Container\ContainerAwareInterface" namespace="League\Container" name="ContainerAwareInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="League\Container\ContainerAwareInterface" namespace="League\Container" name="ContainerAwareInterface"/>
      </return>
      <parameter name="container" byreference="false" type="object">
        <type full="Psr\Container\ContainerInterface" namespace="Psr\Container" name="ContainerInterface"/>
      </parameter>
    </method>
    <method name="getContainer" start="23" end="23" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the container"/>
        <return type="object">
          <type full="Psr\Container\ContainerInterface" namespace="Psr\Container" name="ContainerInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="Psr\Container\ContainerInterface" namespace="Psr\Container" name="ContainerInterface"/>
      </return>
    </method>
    <method name="setLeagueContainer" start="32" end="32" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a container. This will be removed in favour of setContainer receiving Container in next major release."/>
        <param type="object" variable="$container">
          <type full="League\Container\Container" namespace="League\Container" name="Container"/>
        </param>
        <return resolution="self" type="object">
          <type full="League\Container\ContainerAwareInterface" namespace="League\Container" name="ContainerAwareInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="League\Container\ContainerAwareInterface" namespace="League\Container" name="ContainerAwareInterface"/>
      </return>
      <parameter name="container" byreference="false" type="object">
        <type full="League\Container\Container" namespace="League\Container" name="Container"/>
      </parameter>
    </method>
    <method name="getLeagueContainer" start="39" end="39" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the container. This will be removed in favour of getContainer returning Container in next major release."/>
        <return type="object">
          <type full="League\Container\Container" namespace="League\Container" name="Container"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="League\Container\Container" namespace="League\Container" name="Container"/>
      </return>
    </method>
  </parent>
  <implementors>
    <class full="League\Container\Definition\Definition" namespace="League\Container\Definition" name="Definition"/>
  </implementors>
</interface>
