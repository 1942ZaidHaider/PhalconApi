<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface" abstract="false" final="false" start="24" end="74">
  <file path="../vendor/composer/composer/src/Composer/Repository" file="RepositoryInterface.php" realpath="/home/cedcoss/gits/Phalcon/PhalconApi/src/vendor/composer/composer/src/Composer/Repository/RepositoryInterface.php" size="2233" time="2022-04-13T14:39:56+00:00" unixtime="1649860796" sha1="01aeb3e7aa52b7e9c3db21d5ef944d74ef79dc39" relative="vendor/composer/composer/src/Composer/Repository/RepositoryInterface.php"/>
  <docblock>
    <description compact="Repository interface."/>
    <author value="Nils Adermann &lt;naderman@naderman.de&gt;"/>
    <author value="Konstantin Kudryashov &lt;ever.zet@gmail.com&gt;"/>
    <author value="Jordi Boggiano &lt;j.boggiano@seld.be&gt;"/>
  </docblock>
  <extends full="Countable" namespace="" name="Countable"/>
  <constant type="{unknown}" name="SEARCH_FULLTEXT" value="0"/>
  <constant type="{unknown}" name="SEARCH_NAME" value="1"/>
  <method name="hasPackage" start="36" end="36" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks if specified package registered (installed)."/>
      <param description="package instance" type="object" variable="$package">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </param>
      <return type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </return>
    </docblock>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
  </method>
  <method name="findPackage" start="46" end="46" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Searches for the first match of a package by name and version."/>
      <param description="package name" type="string" variable="$name"/>
      <param description="package version or version constraint to match against" type="object" variable="$constraint">
        <type full="Composer\Repository\string|\Composer\Semver\Constraint\ConstraintInterface" namespace="Composer\Repository\string|\Composer\Semver\Constraint" name="ConstraintInterface"/>
      </param>
      <return type="object">
        <type full="Composer\Repository\PackageInterface|null" namespace="Composer\Repository" name="PackageInterface|null"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="constraint" byreference="false" type="{unknown}"/>
  </method>
  <method name="findPackages" start="56" end="56" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Searches for all packages matching a name and optionally a version."/>
      <param description="package name" type="string" variable="$name"/>
      <param description="package version or version constraint to match against" type="object" variable="$constraint">
        <type full="Composer\Repository\string|\Composer\Semver\Constraint\ConstraintInterface" namespace="Composer\Repository\string|\Composer\Semver\Constraint" name="ConstraintInterface"/>
      </param>
      <return type="array" of="object">
        <type full="Composer\Repository\PackageInterface" namespace="Composer\Repository" name="PackageInterface"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="constraint" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="getPackages" start="63" end="63" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns list of registered packages."/>
      <return type="array" of="object">
        <type full="Composer\Repository\PackageInterface" namespace="Composer\Repository" name="PackageInterface"/>
      </return>
    </docblock>
  </method>
  <method name="search" start="73" end="73" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Searches the repository for packages containing the query"/>
      <param description="search query" type="string" variable="$query"/>
      <param description="a set of SEARCH_* constants to search on, implementations should do a best effort only" type="int" variable="$mode"/>
      <return description="an array of array('name' =&gt; '...', 'description' =&gt; '...')" type="array" of="object">
        <type full="Composer\Repository\array" namespace="Composer\Repository" name="array"/>
      </return>
    </docblock>
    <parameter name="query" byreference="false" type="{unknown}"/>
    <parameter name="mode" byreference="false" type="integer" default="0"/>
  </method>
  <implementors>
    <class full="Composer\Repository\WritableArrayRepository" namespace="Composer\Repository" name="WritableArrayRepository"/>
    <class full="Composer\Repository\FilesystemRepository" namespace="Composer\Repository" name="FilesystemRepository"/>
    <class full="Composer\Repository\ArrayRepository" namespace="Composer\Repository" name="ArrayRepository"/>
    <class full="Composer\Repository\CompositeRepository" namespace="Composer\Repository" name="CompositeRepository"/>
    <class full="Composer\Repository\PlatformRepository" namespace="Composer\Repository" name="PlatformRepository"/>
    <class full="Composer\Repository\InstalledArrayRepository" namespace="Composer\Repository" name="InstalledArrayRepository"/>
    <class full="Composer\Repository\ComposerRepository" namespace="Composer\Repository" name="ComposerRepository"/>
    <class full="Composer\Repository\VcsRepository" namespace="Composer\Repository" name="VcsRepository"/>
    <class full="Composer\Repository\PathRepository" namespace="Composer\Repository" name="PathRepository"/>
    <class full="Composer\Repository\ArtifactRepository" namespace="Composer\Repository" name="ArtifactRepository"/>
    <class full="Composer\Repository\PackageRepository" namespace="Composer\Repository" name="PackageRepository"/>
    <class full="Composer\Repository\BaseRepository" namespace="Composer\Repository" name="BaseRepository"/>
    <class full="Composer\Repository\InstalledFilesystemRepository" namespace="Composer\Repository" name="InstalledFilesystemRepository"/>
    <class full="Composer\Repository\PearRepository" namespace="Composer\Repository" name="PearRepository"/>
  </implementors>
  <extenders>
    <extender full="Composer\Repository\WritableRepositoryInterface" namespace="Composer\Repository" name="WritableRepositoryInterface"/>
    <extender full="Composer\Repository\InstalledRepositoryInterface" namespace="Composer\Repository" name="InstalledRepositoryInterface"/>
  </extenders>
  <parent full="Countable" namespace="" name="Countable">
    <method name="count" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Count elements of an object"/>
      <return type="int"/>
    </docblock>
  </method>
  </parent>
</interface>
